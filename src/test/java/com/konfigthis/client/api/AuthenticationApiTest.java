/*
 * Endpoints
 * Oyster uses OAuth2 to enable customers to grant access to their data to third party applications. Customers also need to use this API to authenticate themselves when making API requests.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AuthenticationCreateAccessTokenRequest;
import com.konfigthis.client.model.Token;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthenticationApi
 */
@Disabled
public class AuthenticationApiTest {

    private static AuthenticationApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new AuthenticationApi(apiClient);
    }

    /**
     * Create an access token
     *
     * Oyster grants access to API resources based on OAuth. This means that individual customers grant API access to Developer Apps that you create. This applies to both customers and partners. Follow these simple steps: &lt;br&gt;&lt;br&gt; 1. [Create an Oyster account](https://app.oysterhr.com/sign_up) or [log in](https://app.oysterhr.com/users/sign_in) to your existing account. &lt;br&gt; &lt;br&gt; 2. Create an Oyster Developer App in the [Developer Tab](https://app.oysterhr.com/developer) (If you can&#39;t see the developer tab please contact us to enable it for your account). &lt;br&gt; Hint: If you are a customer doing this as a one time action you don&#39;t need to specify a functioning URL as step 3 will explain. &lt;br&gt; &lt;br&gt; 3. If you are a customer you can simply click on the \&quot;Authorization URL\&quot; and grant access to your own app. You will be redirected to the URL you specified when creating the Developer App. In the URL you will see that &#x60;?code&#x3D;xxx&#x60; has been added to the URL. This is the &#x60;code&#x60; you need to create an access token. &lt;br&gt; If you are a partner add \&quot;Authorization URL to your application. The redirect_url should be a URL that goes back to your app and you&#39;re able to programmatically retrieve the URL query param of &#x60;?code&#x3D;xxx&#x60; to then create an access token. &lt;br&gt; &lt;br&gt; 4. You need to first request an &#x60;authorization_code&#x60; with the API request detailed below. This will provide an &#x60;access_token&#x60; that is used as the Bearer Token for making API requests to Oyster. Ensure that you store the &#x60;refresh_token&#x60; for making future API requests. &lt;br&gt; &lt;br&gt; 5. If your &#x60;access_token&#x60; has expired then request a new one using your &#x60;refresh_token&#x60; that you have stored earlier. Ensure you store the new &#x60;refresh_token&#x60; each time as the previous ones will expire. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAccessTokenTest() throws ApiException {
        String clientId = null;
        String clientSecret = null;
        String grantType = null;
        String code = null;
        String redirectUri = null;
        String refreshToken = null;
        Token response = api.createAccessToken()
                .clientId(clientId)
                .clientSecret(clientSecret)
                .grantType(grantType)
                .code(code)
                .redirectUri(redirectUri)
                .refreshToken(refreshToken)
                .execute();
        // TODO: test validations
    }

}
