/*
 * Endpoints
 * Oyster uses OAuth2 to enable customers to grant access to their data to third party applications. Customers also need to use this API to authenticate themselves when making API requests.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AsyncResponse;
import com.konfigthis.client.model.ExpensesCreateOperationKeyRequest;
import com.konfigthis.client.model.ExpensesCreateOperationKeyRequestReceiptAmount;
import com.konfigthis.client.model.ExpensesDeclineExpenseRequest;
import com.konfigthis.client.model.ExpensesGetByIdResponse;
import java.time.LocalDate;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ExpensesApi
 */
@Disabled
public class ExpensesApiTest {

    private static ExpensesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ExpensesApi(apiClient);
    }

    /**
     * Approve expense
     *
     * Approves an expense.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void approveExpenseTest() throws ApiException {
        String id = null;
        api.approveExpense(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Create expense
     *
     * Creates a new expense for an engagement. This is an asynchronous operation. Returns operationKey that can be used to retrieve the operation to know if it&#39;s successfully completed
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOperationKeyTest() throws ApiException {
        String engagementId = null;
        String name = null;
        LocalDate incurredOn = null;
        String category = null;
        String receiptUrl = null;
        ExpensesCreateOperationKeyRequestReceiptAmount receiptAmount = null;
        String description = null;
        AsyncResponse response = api.createOperationKey(engagementId, name, incurredOn, category, receiptUrl, receiptAmount)
                .description(description)
                .execute();
        // TODO: test validations
    }

    /**
     * Decline expense
     *
     * Declines an expense.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void declineExpenseTest() throws ApiException {
        String id = null;
        String reason = null;
        api.declineExpense(id)
                .reason(reason)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve an individual expense
     *
     * Returns details for an expense with a given expense ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String id = null;
        ExpensesGetByIdResponse response = api.getById(id)
                .execute();
        // TODO: test validations
    }

}
