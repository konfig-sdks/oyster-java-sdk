/*
 * Endpoints
 * Oyster uses OAuth2 to enable customers to grant access to their data to third party applications. Customers also need to use this API to authenticate themselves when making API requests.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.TimeOffGetAllRequestsResponse;
import com.konfigthis.client.model.TimeOffGetEntitlementsResponse;
import com.konfigthis.client.model.TimeOffGetRequestResponse;
import com.konfigthis.client.model.TimeOffRejectRequestRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TimeOffApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TimeOffApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TimeOffApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call approveRequestCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/time_off/requests/{id}/approve"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call approveRequestValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling approveRequest(Async)");
        }

        return approveRequestCall(id, _callback);

    }


    private ApiResponse<Void> approveRequestWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = approveRequestValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call approveRequestAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = approveRequestValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ApproveRequestRequestBuilder {
        private final String id;

        private ApproveRequestRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for approveRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Resource does not exist, or no permission to access resource </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return approveRequestCall(id, _callback);
        }


        /**
         * Execute approveRequest request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Resource does not exist, or no permission to access resource </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            approveRequestWithHttpInfo(id);
        }

        /**
         * Execute approveRequest request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Resource does not exist, or no permission to access resource </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return approveRequestWithHttpInfo(id);
        }

        /**
         * Execute approveRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Resource does not exist, or no permission to access resource </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return approveRequestAsync(id, _callback);
        }
    }

    /**
     * Approve request
     * Approves a time off request.
     * @param id Time Off Request ID (required)
     * @return ApproveRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist, or no permission to access resource </td><td>  -  </td></tr>
     </table>
     */
    public ApproveRequestRequestBuilder approveRequest(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new ApproveRequestRequestBuilder(id);
    }
    private okhttp3.Call getAllRequestsCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/time_off/requests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllRequestsValidateBeforeCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        return getAllRequestsCall(perPage, page, _callback);

    }


    private ApiResponse<TimeOffGetAllRequestsResponse> getAllRequestsWithHttpInfo(Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = getAllRequestsValidateBeforeCall(perPage, page, null);
        Type localVarReturnType = new TypeToken<TimeOffGetAllRequestsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllRequestsAsync(Integer perPage, Integer page, final ApiCallback<TimeOffGetAllRequestsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllRequestsValidateBeforeCall(perPage, page, _callback);
        Type localVarReturnType = new TypeToken<TimeOffGetAllRequestsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllRequestsRequestBuilder {
        private Integer perPage;
        private Integer page;

        private GetAllRequestsRequestBuilder() {
        }

        /**
         * Set perPage
         * @param perPage  (optional)
         * @return GetAllRequestsRequestBuilder
         */
        public GetAllRequestsRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return GetAllRequestsRequestBuilder
         */
        public GetAllRequestsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Build call for getAllRequests
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllRequestsCall(perPage, page, _callback);
        }


        /**
         * Execute getAllRequests request
         * @return TimeOffGetAllRequestsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
         </table>
         */
        public TimeOffGetAllRequestsResponse execute() throws ApiException {
            ApiResponse<TimeOffGetAllRequestsResponse> localVarResp = getAllRequestsWithHttpInfo(perPage, page);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllRequests request with HTTP info returned
         * @return ApiResponse&lt;TimeOffGetAllRequestsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeOffGetAllRequestsResponse> executeWithHttpInfo() throws ApiException {
            return getAllRequestsWithHttpInfo(perPage, page);
        }

        /**
         * Execute getAllRequests request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeOffGetAllRequestsResponse> _callback) throws ApiException {
            return getAllRequestsAsync(perPage, page, _callback);
        }
    }

    /**
     * Retrieve all requests
     * Returns all Time Off Requests for a company.
     * @return GetAllRequestsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public GetAllRequestsRequestBuilder getAllRequests() throws IllegalArgumentException {
        return new GetAllRequestsRequestBuilder();
    }
    private okhttp3.Call getEntitlementsCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/time_off/entitlements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEntitlementsValidateBeforeCall(Integer perPage, Integer page, final ApiCallback _callback) throws ApiException {
        return getEntitlementsCall(perPage, page, _callback);

    }


    private ApiResponse<TimeOffGetEntitlementsResponse> getEntitlementsWithHttpInfo(Integer perPage, Integer page) throws ApiException {
        okhttp3.Call localVarCall = getEntitlementsValidateBeforeCall(perPage, page, null);
        Type localVarReturnType = new TypeToken<TimeOffGetEntitlementsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEntitlementsAsync(Integer perPage, Integer page, final ApiCallback<TimeOffGetEntitlementsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEntitlementsValidateBeforeCall(perPage, page, _callback);
        Type localVarReturnType = new TypeToken<TimeOffGetEntitlementsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEntitlementsRequestBuilder {
        private Integer perPage;
        private Integer page;

        private GetEntitlementsRequestBuilder() {
        }

        /**
         * Set perPage
         * @param perPage  (optional)
         * @return GetEntitlementsRequestBuilder
         */
        public GetEntitlementsRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return GetEntitlementsRequestBuilder
         */
        public GetEntitlementsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Build call for getEntitlements
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEntitlementsCall(perPage, page, _callback);
        }


        /**
         * Execute getEntitlements request
         * @return TimeOffGetEntitlementsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
         </table>
         */
        public TimeOffGetEntitlementsResponse execute() throws ApiException {
            ApiResponse<TimeOffGetEntitlementsResponse> localVarResp = getEntitlementsWithHttpInfo(perPage, page);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEntitlements request with HTTP info returned
         * @return ApiResponse&lt;TimeOffGetEntitlementsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeOffGetEntitlementsResponse> executeWithHttpInfo() throws ApiException {
            return getEntitlementsWithHttpInfo(perPage, page);
        }

        /**
         * Execute getEntitlements request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeOffGetEntitlementsResponse> _callback) throws ApiException {
            return getEntitlementsAsync(perPage, page, _callback);
        }
    }

    /**
     * Retrieve entitlements
     * Returns entitlements for each engagement of the company.
     * @return GetEntitlementsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public GetEntitlementsRequestBuilder getEntitlements() throws IllegalArgumentException {
        return new GetEntitlementsRequestBuilder();
    }
    private okhttp3.Call getRequestCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/time_off/requests/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRequestValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRequest(Async)");
        }

        return getRequestCall(id, _callback);

    }


    private ApiResponse<TimeOffGetRequestResponse> getRequestWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getRequestValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<TimeOffGetRequestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRequestAsync(String id, final ApiCallback<TimeOffGetRequestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRequestValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<TimeOffGetRequestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRequestRequestBuilder {
        private final String id;

        private GetRequestRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Resource does not exist, or no permission to access resource </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRequestCall(id, _callback);
        }


        /**
         * Execute getRequest request
         * @return TimeOffGetRequestResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Resource does not exist, or no permission to access resource </td><td>  -  </td></tr>
         </table>
         */
        public TimeOffGetRequestResponse execute() throws ApiException {
            ApiResponse<TimeOffGetRequestResponse> localVarResp = getRequestWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRequest request with HTTP info returned
         * @return ApiResponse&lt;TimeOffGetRequestResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Resource does not exist, or no permission to access resource </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeOffGetRequestResponse> executeWithHttpInfo() throws ApiException {
            return getRequestWithHttpInfo(id);
        }

        /**
         * Execute getRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Resource does not exist, or no permission to access resource </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeOffGetRequestResponse> _callback) throws ApiException {
            return getRequestAsync(id, _callback);
        }
    }

    /**
     * Retrieve an individual request
     * Returns details for a request.
     * @param id Time Off Request ID (required)
     * @return GetRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist, or no permission to access resource </td><td>  -  </td></tr>
     </table>
     */
    public GetRequestRequestBuilder getRequest(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetRequestRequestBuilder(id);
    }
    private okhttp3.Call rejectRequestCall(String id, TimeOffRejectRequestRequest timeOffRejectRequestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeOffRejectRequestRequest;

        // create path and map variables
        String localVarPath = "/v1/time_off/requests/{id}/reject"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rejectRequestValidateBeforeCall(String id, TimeOffRejectRequestRequest timeOffRejectRequestRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling rejectRequest(Async)");
        }

        return rejectRequestCall(id, timeOffRejectRequestRequest, _callback);

    }


    private ApiResponse<Void> rejectRequestWithHttpInfo(String id, TimeOffRejectRequestRequest timeOffRejectRequestRequest) throws ApiException {
        okhttp3.Call localVarCall = rejectRequestValidateBeforeCall(id, timeOffRejectRequestRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call rejectRequestAsync(String id, TimeOffRejectRequestRequest timeOffRejectRequestRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = rejectRequestValidateBeforeCall(id, timeOffRejectRequestRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RejectRequestRequestBuilder {
        private final String reason;
        private final String id;

        private RejectRequestRequestBuilder(String reason, String id) {
            this.reason = reason;
            this.id = id;
        }

        /**
         * Build call for rejectRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Resource does not exist, or no permission to access resource </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeOffRejectRequestRequest timeOffRejectRequestRequest = buildBodyParams();
            return rejectRequestCall(id, timeOffRejectRequestRequest, _callback);
        }

        private TimeOffRejectRequestRequest buildBodyParams() {
            TimeOffRejectRequestRequest timeOffRejectRequestRequest = new TimeOffRejectRequestRequest();
            timeOffRejectRequestRequest.reason(this.reason);
            return timeOffRejectRequestRequest;
        }

        /**
         * Execute rejectRequest request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Resource does not exist, or no permission to access resource </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TimeOffRejectRequestRequest timeOffRejectRequestRequest = buildBodyParams();
            rejectRequestWithHttpInfo(id, timeOffRejectRequestRequest);
        }

        /**
         * Execute rejectRequest request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Resource does not exist, or no permission to access resource </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TimeOffRejectRequestRequest timeOffRejectRequestRequest = buildBodyParams();
            return rejectRequestWithHttpInfo(id, timeOffRejectRequestRequest);
        }

        /**
         * Execute rejectRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Resource does not exist, or no permission to access resource </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TimeOffRejectRequestRequest timeOffRejectRequestRequest = buildBodyParams();
            return rejectRequestAsync(id, timeOffRejectRequestRequest, _callback);
        }
    }

    /**
     * Reject request
     * Rejects a time off request.
     * @param id Time Off Request ID (required)
     * @return RejectRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist, or no permission to access resource </td><td>  -  </td></tr>
     </table>
     */
    public RejectRequestRequestBuilder rejectRequest(String reason, String id) throws IllegalArgumentException {
        if (reason == null) throw new IllegalArgumentException("\"reason\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new RejectRequestRequestBuilder(reason, id);
    }
}
