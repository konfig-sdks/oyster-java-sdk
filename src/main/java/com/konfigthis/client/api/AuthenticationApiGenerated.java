/*
 * Endpoints
 * Oyster uses OAuth2 to enable customers to grant access to their data to third party applications. Customers also need to use this API to authenticate themselves when making API requests.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AuthenticationCreateAccessTokenRequest;
import com.konfigthis.client.model.Token;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AuthenticationApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthenticationApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AuthenticationApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createAccessTokenCall(AuthenticationCreateAccessTokenRequest authenticationCreateAccessTokenRequest, String clientId, String clientSecret, String grantType, String code, String redirectUri, String refreshToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authenticationCreateAccessTokenRequest;

        // create path and map variables
        String localVarPath = "/oauth2/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientId != null) {
            localVarFormParams.put("client_id", clientId);
        }

        if (clientSecret != null) {
            localVarFormParams.put("client_secret", clientSecret);
        }

        if (grantType != null) {
            localVarFormParams.put("grant_type", grantType);
        }

        if (code != null) {
            localVarFormParams.put("code", code);
        }

        if (redirectUri != null) {
            localVarFormParams.put("redirect_uri", redirectUri);
        }

        if (refreshToken != null) {
            localVarFormParams.put("refresh_token", refreshToken);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAccessTokenValidateBeforeCall(AuthenticationCreateAccessTokenRequest authenticationCreateAccessTokenRequest, String clientId, String clientSecret, String grantType, String code, String redirectUri, String refreshToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authenticationCreateAccessTokenRequest' is set
        if (authenticationCreateAccessTokenRequest == null) {
            throw new ApiException("Missing the required parameter 'authenticationCreateAccessTokenRequest' when calling createAccessToken(Async)");
        }

        return createAccessTokenCall(authenticationCreateAccessTokenRequest, clientId, clientSecret, grantType, code, redirectUri, refreshToken, _callback);

    }


    private ApiResponse<Token> createAccessTokenWithHttpInfo(AuthenticationCreateAccessTokenRequest authenticationCreateAccessTokenRequest, String clientId, String clientSecret, String grantType, String code, String redirectUri, String refreshToken) throws ApiException {
        okhttp3.Call localVarCall = createAccessTokenValidateBeforeCall(authenticationCreateAccessTokenRequest, clientId, clientSecret, grantType, code, redirectUri, refreshToken, null);
        Type localVarReturnType = new TypeToken<Token>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createAccessTokenAsync(AuthenticationCreateAccessTokenRequest authenticationCreateAccessTokenRequest, String clientId, String clientSecret, String grantType, String code, String redirectUri, String refreshToken, final ApiCallback<Token> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAccessTokenValidateBeforeCall(authenticationCreateAccessTokenRequest, clientId, clientSecret, grantType, code, redirectUri, refreshToken, _callback);
        Type localVarReturnType = new TypeToken<Token>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateAccessTokenRequestBuilder {
        private String clientId;
        private String clientSecret;
        private String grantType;
        private String code;
        private String redirectUri;
        private String refreshToken;

        private CreateAccessTokenRequestBuilder() {
        }

        /**
         * Set clientId
         * @param clientId The client_id of your Developer App. This can be found by visting https://app.oysterhr.com/developer (optional)
         * @return CreateAccessTokenRequestBuilder
         */
        public CreateAccessTokenRequestBuilder clientId(String clientId) {
            this.clientId = clientId;
            return this;
        }
        
        /**
         * Set clientSecret
         * @param clientSecret The secret of your Developer App. (optional)
         * @return CreateAccessTokenRequestBuilder
         */
        public CreateAccessTokenRequestBuilder clientSecret(String clientSecret) {
            this.clientSecret = clientSecret;
            return this;
        }
        
        /**
         * Set grantType
         * @param grantType First you need to request an &#x60;authorization_code&#x60;. Afterwards you can request a &#x60;refresh_token&#x60;. (optional)
         * @return CreateAccessTokenRequestBuilder
         */
        public CreateAccessTokenRequestBuilder grantType(String grantType) {
            this.grantType = grantType;
            return this;
        }
        
        /**
         * Set code
         * @param code The code is required when requesting an &#x60;authorization_code&#x60;. (optional)
         * @return CreateAccessTokenRequestBuilder
         */
        public CreateAccessTokenRequestBuilder code(String code) {
            this.code = code;
            return this;
        }
        
        /**
         * Set redirectUri
         * @param redirectUri The redirect_uri is required when requesting an &#x60;authorization_code&#x60;. (optional)
         * @return CreateAccessTokenRequestBuilder
         */
        public CreateAccessTokenRequestBuilder redirectUri(String redirectUri) {
            this.redirectUri = redirectUri;
            return this;
        }
        
        /**
         * Set refreshToken
         * @param refreshToken A &#x60;refresh_token&#x60; is required when requesting a &#x60;refresh_token&#x60;. A &#x60;refresh_token&#x60; will be provided when requesting an &#x60;authorization_code&#x60; (optional)
         * @return CreateAccessTokenRequestBuilder
         */
        public CreateAccessTokenRequestBuilder refreshToken(String refreshToken) {
            this.refreshToken = refreshToken;
            return this;
        }
        
        /**
         * Build call for createAccessToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create an access token to make an API request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AuthenticationCreateAccessTokenRequest authenticationCreateAccessTokenRequest = buildBodyParams();
            return createAccessTokenCall(authenticationCreateAccessTokenRequest, clientId, clientSecret, grantType, code, redirectUri, refreshToken, _callback);
        }

        private AuthenticationCreateAccessTokenRequest buildBodyParams() {
            AuthenticationCreateAccessTokenRequest authenticationCreateAccessTokenRequest = new AuthenticationCreateAccessTokenRequest();
            authenticationCreateAccessTokenRequest.clientId(this.clientId);
            authenticationCreateAccessTokenRequest.clientSecret(this.clientSecret);
            authenticationCreateAccessTokenRequest.grantType(this.grantType);
            authenticationCreateAccessTokenRequest.code(this.code);
            authenticationCreateAccessTokenRequest.redirectUri(this.redirectUri);
            authenticationCreateAccessTokenRequest.refreshToken(this.refreshToken);
            return authenticationCreateAccessTokenRequest;
        }

        /**
         * Execute createAccessToken request
         * @return Token
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create an access token to make an API request </td><td>  -  </td></tr>
         </table>
         */
        public Token execute() throws ApiException {
            AuthenticationCreateAccessTokenRequest authenticationCreateAccessTokenRequest = buildBodyParams();
            ApiResponse<Token> localVarResp = createAccessTokenWithHttpInfo(authenticationCreateAccessTokenRequest, clientId, clientSecret, grantType, code, redirectUri, refreshToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createAccessToken request with HTTP info returned
         * @return ApiResponse&lt;Token&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create an access token to make an API request </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Token> executeWithHttpInfo() throws ApiException {
            AuthenticationCreateAccessTokenRequest authenticationCreateAccessTokenRequest = buildBodyParams();
            return createAccessTokenWithHttpInfo(authenticationCreateAccessTokenRequest, clientId, clientSecret, grantType, code, redirectUri, refreshToken);
        }

        /**
         * Execute createAccessToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Create an access token to make an API request </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Token> _callback) throws ApiException {
            AuthenticationCreateAccessTokenRequest authenticationCreateAccessTokenRequest = buildBodyParams();
            return createAccessTokenAsync(authenticationCreateAccessTokenRequest, clientId, clientSecret, grantType, code, redirectUri, refreshToken, _callback);
        }
    }

    /**
     * Create an access token
     * Oyster grants access to API resources based on OAuth. This means that individual customers grant API access to Developer Apps that you create. This applies to both customers and partners. Follow these simple steps: &lt;br&gt;&lt;br&gt; 1. [Create an Oyster account](https://app.oysterhr.com/sign_up) or [log in](https://app.oysterhr.com/users/sign_in) to your existing account. &lt;br&gt; &lt;br&gt; 2. Create an Oyster Developer App in the [Developer Tab](https://app.oysterhr.com/developer) (If you can&#39;t see the developer tab please contact us to enable it for your account). &lt;br&gt; Hint: If you are a customer doing this as a one time action you don&#39;t need to specify a functioning URL as step 3 will explain. &lt;br&gt; &lt;br&gt; 3. If you are a customer you can simply click on the \&quot;Authorization URL\&quot; and grant access to your own app. You will be redirected to the URL you specified when creating the Developer App. In the URL you will see that &#x60;?code&#x3D;xxx&#x60; has been added to the URL. This is the &#x60;code&#x60; you need to create an access token. &lt;br&gt; If you are a partner add \&quot;Authorization URL to your application. The redirect_url should be a URL that goes back to your app and you&#39;re able to programmatically retrieve the URL query param of &#x60;?code&#x3D;xxx&#x60; to then create an access token. &lt;br&gt; &lt;br&gt; 4. You need to first request an &#x60;authorization_code&#x60; with the API request detailed below. This will provide an &#x60;access_token&#x60; that is used as the Bearer Token for making API requests to Oyster. Ensure that you store the &#x60;refresh_token&#x60; for making future API requests. &lt;br&gt; &lt;br&gt; 5. If your &#x60;access_token&#x60; has expired then request a new one using your &#x60;refresh_token&#x60; that you have stored earlier. Ensure you store the new &#x60;refresh_token&#x60; each time as the previous ones will expire. 
     * @param authenticationCreateAccessTokenRequest  (required)
     * @return CreateAccessTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create an access token to make an API request </td><td>  -  </td></tr>
     </table>
     */
    public CreateAccessTokenRequestBuilder createAccessToken() throws IllegalArgumentException {
        return new CreateAccessTokenRequestBuilder();
    }
}
