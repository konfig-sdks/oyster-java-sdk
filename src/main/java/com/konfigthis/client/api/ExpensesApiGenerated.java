/*
 * Endpoints
 * Oyster uses OAuth2 to enable customers to grant access to their data to third party applications. Customers also need to use this API to authenticate themselves when making API requests.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AsyncResponse;
import com.konfigthis.client.model.ExpensesCreateOperationKeyRequest;
import com.konfigthis.client.model.ExpensesCreateOperationKeyRequestReceiptAmount;
import com.konfigthis.client.model.ExpensesDeclineExpenseRequest;
import com.konfigthis.client.model.ExpensesGetByIdResponse;
import java.time.LocalDate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ExpensesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ExpensesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ExpensesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call approveExpenseCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/expenses/{id}/approve"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call approveExpenseValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling approveExpense(Async)");
        }

        return approveExpenseCall(id, _callback);

    }


    private ApiResponse<Void> approveExpenseWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = approveExpenseValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call approveExpenseAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = approveExpenseValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ApproveExpenseRequestBuilder {
        private final String id;

        private ApproveExpenseRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for approveExpense
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Resource does not exist, or no permission to access resource </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return approveExpenseCall(id, _callback);
        }


        /**
         * Execute approveExpense request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Resource does not exist, or no permission to access resource </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            approveExpenseWithHttpInfo(id);
        }

        /**
         * Execute approveExpense request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Resource does not exist, or no permission to access resource </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return approveExpenseWithHttpInfo(id);
        }

        /**
         * Execute approveExpense request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Resource does not exist, or no permission to access resource </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return approveExpenseAsync(id, _callback);
        }
    }

    /**
     * Approve expense
     * Approves an expense.
     * @param id Expense ID (required)
     * @return ApproveExpenseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist, or no permission to access resource </td><td>  -  </td></tr>
     </table>
     */
    public ApproveExpenseRequestBuilder approveExpense(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new ApproveExpenseRequestBuilder(id);
    }
    private okhttp3.Call createOperationKeyCall(ExpensesCreateOperationKeyRequest expensesCreateOperationKeyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = expensesCreateOperationKeyRequest;

        // create path and map variables
        String localVarPath = "/v1/expenses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOperationKeyValidateBeforeCall(ExpensesCreateOperationKeyRequest expensesCreateOperationKeyRequest, final ApiCallback _callback) throws ApiException {
        return createOperationKeyCall(expensesCreateOperationKeyRequest, _callback);

    }


    private ApiResponse<AsyncResponse> createOperationKeyWithHttpInfo(ExpensesCreateOperationKeyRequest expensesCreateOperationKeyRequest) throws ApiException {
        okhttp3.Call localVarCall = createOperationKeyValidateBeforeCall(expensesCreateOperationKeyRequest, null);
        Type localVarReturnType = new TypeToken<AsyncResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createOperationKeyAsync(ExpensesCreateOperationKeyRequest expensesCreateOperationKeyRequest, final ApiCallback<AsyncResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOperationKeyValidateBeforeCall(expensesCreateOperationKeyRequest, _callback);
        Type localVarReturnType = new TypeToken<AsyncResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateOperationKeyRequestBuilder {
        private final String engagementId;
        private final String name;
        private final LocalDate incurredOn;
        private final String category;
        private final String receiptUrl;
        private final ExpensesCreateOperationKeyRequestReceiptAmount receiptAmount;
        private String description;

        private CreateOperationKeyRequestBuilder(String engagementId, String name, LocalDate incurredOn, String category, String receiptUrl, ExpensesCreateOperationKeyRequestReceiptAmount receiptAmount) {
            this.engagementId = engagementId;
            this.name = name;
            this.incurredOn = incurredOn;
            this.category = category;
            this.receiptUrl = receiptUrl;
            this.receiptAmount = receiptAmount;
        }

        /**
         * Set description
         * @param description  (optional)
         * @return CreateOperationKeyRequestBuilder
         */
        public CreateOperationKeyRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Build call for createOperationKey
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successfully created async operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ExpensesCreateOperationKeyRequest expensesCreateOperationKeyRequest = buildBodyParams();
            return createOperationKeyCall(expensesCreateOperationKeyRequest, _callback);
        }

        private ExpensesCreateOperationKeyRequest buildBodyParams() {
            ExpensesCreateOperationKeyRequest expensesCreateOperationKeyRequest = new ExpensesCreateOperationKeyRequest();
            expensesCreateOperationKeyRequest.description(this.description);
            expensesCreateOperationKeyRequest.engagementId(this.engagementId);
            expensesCreateOperationKeyRequest.name(this.name);
            expensesCreateOperationKeyRequest.incurredOn(this.incurredOn);
            expensesCreateOperationKeyRequest.category(this.category);
            expensesCreateOperationKeyRequest.receiptUrl(this.receiptUrl);
            expensesCreateOperationKeyRequest.receiptAmount(this.receiptAmount);
            return expensesCreateOperationKeyRequest;
        }

        /**
         * Execute createOperationKey request
         * @return AsyncResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successfully created async operation </td><td>  -  </td></tr>
         </table>
         */
        public AsyncResponse execute() throws ApiException {
            ExpensesCreateOperationKeyRequest expensesCreateOperationKeyRequest = buildBodyParams();
            ApiResponse<AsyncResponse> localVarResp = createOperationKeyWithHttpInfo(expensesCreateOperationKeyRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createOperationKey request with HTTP info returned
         * @return ApiResponse&lt;AsyncResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successfully created async operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AsyncResponse> executeWithHttpInfo() throws ApiException {
            ExpensesCreateOperationKeyRequest expensesCreateOperationKeyRequest = buildBodyParams();
            return createOperationKeyWithHttpInfo(expensesCreateOperationKeyRequest);
        }

        /**
         * Execute createOperationKey request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Successfully created async operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AsyncResponse> _callback) throws ApiException {
            ExpensesCreateOperationKeyRequest expensesCreateOperationKeyRequest = buildBodyParams();
            return createOperationKeyAsync(expensesCreateOperationKeyRequest, _callback);
        }
    }

    /**
     * Create expense
     * Creates a new expense for an engagement. This is an asynchronous operation. Returns operationKey that can be used to retrieve the operation to know if it&#39;s successfully completed
     * @return CreateOperationKeyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully created async operation </td><td>  -  </td></tr>
     </table>
     */
    public CreateOperationKeyRequestBuilder createOperationKey(String engagementId, String name, LocalDate incurredOn, String category, String receiptUrl, ExpensesCreateOperationKeyRequestReceiptAmount receiptAmount) throws IllegalArgumentException {
        if (engagementId == null) throw new IllegalArgumentException("\"engagementId\" is required but got null");
            if (engagementId != null && engagementId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for engagementId. Length must be greater than or equal to 1.");
            }

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            if (name != null && name.length() < 1) {
              throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
            }

        if (incurredOn == null) throw new IllegalArgumentException("\"incurredOn\" is required but got null");
        if (category == null) throw new IllegalArgumentException("\"category\" is required but got null");
            if (category != null && category.length() < 1) {
              throw new IllegalArgumentException("Invalid value for category. Length must be greater than or equal to 1.");
            }

        if (receiptUrl == null) throw new IllegalArgumentException("\"receiptUrl\" is required but got null");
            if (receiptUrl != null && receiptUrl.length() < 1) {
              throw new IllegalArgumentException("Invalid value for receiptUrl. Length must be greater than or equal to 1.");
            }

        if (receiptAmount == null) throw new IllegalArgumentException("\"receiptAmount\" is required but got null");
        return new CreateOperationKeyRequestBuilder(engagementId, name, incurredOn, category, receiptUrl, receiptAmount);
    }
    private okhttp3.Call declineExpenseCall(String id, ExpensesDeclineExpenseRequest expensesDeclineExpenseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = expensesDeclineExpenseRequest;

        // create path and map variables
        String localVarPath = "/v1/expenses/{id}/decline"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call declineExpenseValidateBeforeCall(String id, ExpensesDeclineExpenseRequest expensesDeclineExpenseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling declineExpense(Async)");
        }

        return declineExpenseCall(id, expensesDeclineExpenseRequest, _callback);

    }


    private ApiResponse<Void> declineExpenseWithHttpInfo(String id, ExpensesDeclineExpenseRequest expensesDeclineExpenseRequest) throws ApiException {
        okhttp3.Call localVarCall = declineExpenseValidateBeforeCall(id, expensesDeclineExpenseRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call declineExpenseAsync(String id, ExpensesDeclineExpenseRequest expensesDeclineExpenseRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = declineExpenseValidateBeforeCall(id, expensesDeclineExpenseRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeclineExpenseRequestBuilder {
        private final String id;
        private String reason;

        private DeclineExpenseRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set reason
         * @param reason  (optional)
         * @return DeclineExpenseRequestBuilder
         */
        public DeclineExpenseRequestBuilder reason(String reason) {
            this.reason = reason;
            return this;
        }
        
        /**
         * Build call for declineExpense
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Resource does not exist, or no permission to access resource </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ExpensesDeclineExpenseRequest expensesDeclineExpenseRequest = buildBodyParams();
            return declineExpenseCall(id, expensesDeclineExpenseRequest, _callback);
        }

        private ExpensesDeclineExpenseRequest buildBodyParams() {
            ExpensesDeclineExpenseRequest expensesDeclineExpenseRequest = new ExpensesDeclineExpenseRequest();
            expensesDeclineExpenseRequest.reason(this.reason);
            return expensesDeclineExpenseRequest;
        }

        /**
         * Execute declineExpense request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Resource does not exist, or no permission to access resource </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ExpensesDeclineExpenseRequest expensesDeclineExpenseRequest = buildBodyParams();
            declineExpenseWithHttpInfo(id, expensesDeclineExpenseRequest);
        }

        /**
         * Execute declineExpense request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Resource does not exist, or no permission to access resource </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ExpensesDeclineExpenseRequest expensesDeclineExpenseRequest = buildBodyParams();
            return declineExpenseWithHttpInfo(id, expensesDeclineExpenseRequest);
        }

        /**
         * Execute declineExpense request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Resource does not exist, or no permission to access resource </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ExpensesDeclineExpenseRequest expensesDeclineExpenseRequest = buildBodyParams();
            return declineExpenseAsync(id, expensesDeclineExpenseRequest, _callback);
        }
    }

    /**
     * Decline expense
     * Declines an expense.
     * @param id Expense ID (required)
     * @return DeclineExpenseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist, or no permission to access resource </td><td>  -  </td></tr>
     </table>
     */
    public DeclineExpenseRequestBuilder declineExpense(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new DeclineExpenseRequestBuilder(id);
    }
    private okhttp3.Call getByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/expenses/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getById(Async)");
        }

        return getByIdCall(id, _callback);

    }


    private ApiResponse<ExpensesGetByIdResponse> getByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ExpensesGetByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String id, final ApiCallback<ExpensesGetByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ExpensesGetByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String id;

        private GetByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Resource does not exist, or no permission to access resource </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(id, _callback);
        }


        /**
         * Execute getById request
         * @return ExpensesGetByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Resource does not exist, or no permission to access resource </td><td>  -  </td></tr>
         </table>
         */
        public ExpensesGetByIdResponse execute() throws ApiException {
            ApiResponse<ExpensesGetByIdResponse> localVarResp = getByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;ExpensesGetByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Resource does not exist, or no permission to access resource </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExpensesGetByIdResponse> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(id);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Resource does not exist, or no permission to access resource </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExpensesGetByIdResponse> _callback) throws ApiException {
            return getByIdAsync(id, _callback);
        }
    }

    /**
     * Retrieve an individual expense
     * Returns details for an expense with a given expense ID.
     * @param id Expense ID (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist, or no permission to access resource </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetByIdRequestBuilder(id);
    }
}
