/*
 * Endpoints
 * Oyster uses OAuth2 to enable customers to grant access to their data to third party applications. Customers also need to use this API to authenticate themselves when making API requests.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.OperationsGetByOperationKeyResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OperationsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OperationsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public OperationsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getByOperationKeyCall(String operationKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/meta/operations/{operation_key}"
            .replace("{" + "operation_key" + "}", localVarApiClient.escapeString(operationKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByOperationKeyValidateBeforeCall(String operationKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'operationKey' is set
        if (operationKey == null) {
            throw new ApiException("Missing the required parameter 'operationKey' when calling getByOperationKey(Async)");
        }

        return getByOperationKeyCall(operationKey, _callback);

    }


    private ApiResponse<OperationsGetByOperationKeyResponse> getByOperationKeyWithHttpInfo(String operationKey) throws ApiException {
        okhttp3.Call localVarCall = getByOperationKeyValidateBeforeCall(operationKey, null);
        Type localVarReturnType = new TypeToken<OperationsGetByOperationKeyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByOperationKeyAsync(String operationKey, final ApiCallback<OperationsGetByOperationKeyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByOperationKeyValidateBeforeCall(operationKey, _callback);
        Type localVarReturnType = new TypeToken<OperationsGetByOperationKeyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByOperationKeyRequestBuilder {
        private final String operationKey;

        private GetByOperationKeyRequestBuilder(String operationKey) {
            this.operationKey = operationKey;
        }

        /**
         * Build call for getByOperationKey
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Resource does not exist, or no permission to access resource </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByOperationKeyCall(operationKey, _callback);
        }


        /**
         * Execute getByOperationKey request
         * @return OperationsGetByOperationKeyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Resource does not exist, or no permission to access resource </td><td>  -  </td></tr>
         </table>
         */
        public OperationsGetByOperationKeyResponse execute() throws ApiException {
            ApiResponse<OperationsGetByOperationKeyResponse> localVarResp = getByOperationKeyWithHttpInfo(operationKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByOperationKey request with HTTP info returned
         * @return ApiResponse&lt;OperationsGetByOperationKeyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Resource does not exist, or no permission to access resource </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OperationsGetByOperationKeyResponse> executeWithHttpInfo() throws ApiException {
            return getByOperationKeyWithHttpInfo(operationKey);
        }

        /**
         * Execute getByOperationKey request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Resource does not exist, or no permission to access resource </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OperationsGetByOperationKeyResponse> _callback) throws ApiException {
            return getByOperationKeyAsync(operationKey, _callback);
        }
    }

    /**
     * Retrieve an operation
     * Returns details for an operation with a given operation key.
     * @param operationKey Operation key (required)
     * @return GetByOperationKeyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource does not exist, or no permission to access resource </td><td>  -  </td></tr>
     </table>
     */
    public GetByOperationKeyRequestBuilder getByOperationKey(String operationKey) throws IllegalArgumentException {
        if (operationKey == null) throw new IllegalArgumentException("\"operationKey\" is required but got null");
            

        return new GetByOperationKeyRequestBuilder(operationKey);
    }
}
