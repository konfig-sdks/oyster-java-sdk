/*
 * Endpoints
 * Oyster uses OAuth2 to enable customers to grant access to their data to third party applications. Customers also need to use this API to authenticate themselves when making API requests.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.PayrollRecord;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Payroll
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Payroll {
  public static final String SERIALIZED_NAME_PAYROLL_ID = "payrollId";
  @SerializedName(SERIALIZED_NAME_PAYROLL_ID)
  private String payrollId;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_CUTOFF_TIME_FOR_PAYROLL = "cutoffTimeForPayroll";
  @SerializedName(SERIALIZED_NAME_CUTOFF_TIME_FOR_PAYROLL)
  private OffsetDateTime cutoffTimeForPayroll;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_PAYROLL_RECORDS_COUNT = "payrollRecordsCount";
  @SerializedName(SERIALIZED_NAME_PAYROLL_RECORDS_COUNT)
  private Integer payrollRecordsCount;

  public static final String SERIALIZED_NAME_RECORDS = "records";
  @SerializedName(SERIALIZED_NAME_RECORDS)
  private List<PayrollRecord> records = null;

  public Payroll() {
  }

  public Payroll payrollId(String payrollId) {
    
    
    
    
    this.payrollId = payrollId;
    return this;
  }

   /**
   * Get payrollId
   * @return payrollId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getPayrollId() {
    return payrollId;
  }


  public void setPayrollId(String payrollId) {
    
    
    
    this.payrollId = payrollId;
  }


  public Payroll currencyCode(String currencyCode) {
    
    
    
    
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * Get currencyCode
   * @return currencyCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getCurrencyCode() {
    return currencyCode;
  }


  public void setCurrencyCode(String currencyCode) {
    
    
    
    this.currencyCode = currencyCode;
  }


  public Payroll cutoffTimeForPayroll(OffsetDateTime cutoffTimeForPayroll) {
    
    
    
    
    this.cutoffTimeForPayroll = cutoffTimeForPayroll;
    return this;
  }

   /**
   * Get cutoffTimeForPayroll
   * @return cutoffTimeForPayroll
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getCutoffTimeForPayroll() {
    return cutoffTimeForPayroll;
  }


  public void setCutoffTimeForPayroll(OffsetDateTime cutoffTimeForPayroll) {
    
    
    
    this.cutoffTimeForPayroll = cutoffTimeForPayroll;
  }


  public Payroll state(String state) {
    
    
    
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getState() {
    return state;
  }


  public void setState(String state) {
    
    
    
    this.state = state;
  }


  public Payroll payrollRecordsCount(Integer payrollRecordsCount) {
    
    
    
    
    this.payrollRecordsCount = payrollRecordsCount;
    return this;
  }

   /**
   * Get payrollRecordsCount
   * @return payrollRecordsCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getPayrollRecordsCount() {
    return payrollRecordsCount;
  }


  public void setPayrollRecordsCount(Integer payrollRecordsCount) {
    
    
    
    this.payrollRecordsCount = payrollRecordsCount;
  }


  public Payroll records(List<PayrollRecord> records) {
    
    
    
    
    this.records = records;
    return this;
  }

  public Payroll addRecordsItem(PayrollRecord recordsItem) {
    if (this.records == null) {
      this.records = new ArrayList<>();
    }
    this.records.add(recordsItem);
    return this;
  }

   /**
   * Get records
   * @return records
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<PayrollRecord> getRecords() {
    return records;
  }


  public void setRecords(List<PayrollRecord> records) {
    
    
    
    this.records = records;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Payroll instance itself
   */
  public Payroll putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Payroll payroll = (Payroll) o;
    return Objects.equals(this.payrollId, payroll.payrollId) &&
        Objects.equals(this.currencyCode, payroll.currencyCode) &&
        Objects.equals(this.cutoffTimeForPayroll, payroll.cutoffTimeForPayroll) &&
        Objects.equals(this.state, payroll.state) &&
        Objects.equals(this.payrollRecordsCount, payroll.payrollRecordsCount) &&
        Objects.equals(this.records, payroll.records)&&
        Objects.equals(this.additionalProperties, payroll.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(payrollId, currencyCode, cutoffTimeForPayroll, state, payrollRecordsCount, records, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Payroll {\n");
    sb.append("    payrollId: ").append(toIndentedString(payrollId)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    cutoffTimeForPayroll: ").append(toIndentedString(cutoffTimeForPayroll)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    payrollRecordsCount: ").append(toIndentedString(payrollRecordsCount)).append("\n");
    sb.append("    records: ").append(toIndentedString(records)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("payrollId");
    openapiFields.add("currencyCode");
    openapiFields.add("cutoffTimeForPayroll");
    openapiFields.add("state");
    openapiFields.add("payrollRecordsCount");
    openapiFields.add("records");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("payrollId");
    openapiRequiredFields.add("currencyCode");
    openapiRequiredFields.add("cutoffTimeForPayroll");
    openapiRequiredFields.add("state");
    openapiRequiredFields.add("payrollRecordsCount");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Payroll
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Payroll.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Payroll is not found in the empty JSON string", Payroll.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Payroll.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("payrollId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payrollId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payrollId").toString()));
      }
      if (!jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if (jsonObj.get("records") != null && !jsonObj.get("records").isJsonNull()) {
        JsonArray jsonArrayrecords = jsonObj.getAsJsonArray("records");
        if (jsonArrayrecords != null) {
          // ensure the json data is an array
          if (!jsonObj.get("records").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `records` to be an array in the JSON string but got `%s`", jsonObj.get("records").toString()));
          }

          // validate the optional field `records` (array)
          for (int i = 0; i < jsonArrayrecords.size(); i++) {
            PayrollRecord.validateJsonObject(jsonArrayrecords.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Payroll.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Payroll' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Payroll> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Payroll.class));

       return (TypeAdapter<T>) new TypeAdapter<Payroll>() {
           @Override
           public void write(JsonWriter out, Payroll value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Payroll read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Payroll instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Payroll given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Payroll
  * @throws IOException if the JSON string is invalid with respect to Payroll
  */
  public static Payroll fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Payroll.class);
  }

 /**
  * Convert an instance of Payroll to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

