/*
 * Endpoints
 * Oyster uses OAuth2 to enable customers to grant access to their data to third party applications. Customers also need to use this API to authenticate themselves when making API requests.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Amount;
import com.konfigthis.client.model.PayrollRecordEngagement;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PayrollRecord
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PayrollRecord {
  public static final String SERIALIZED_NAME_ENGAGEMENT_ID = "engagementId";
  @SerializedName(SERIALIZED_NAME_ENGAGEMENT_ID)
  private String engagementId;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_MONTHLY_PAYMENTS_TOTAL_AMOUNT = "monthlyPaymentsTotalAmount";
  @SerializedName(SERIALIZED_NAME_MONTHLY_PAYMENTS_TOTAL_AMOUNT)
  private Amount monthlyPaymentsTotalAmount;

  public static final String SERIALIZED_NAME_ALLOWANCES_TOTAL_AMOUNT = "allowancesTotalAmount";
  @SerializedName(SERIALIZED_NAME_ALLOWANCES_TOTAL_AMOUNT)
  private Amount allowancesTotalAmount;

  public static final String SERIALIZED_NAME_BENEFITS_TOTAL_AMOUNT = "benefitsTotalAmount";
  @SerializedName(SERIALIZED_NAME_BENEFITS_TOTAL_AMOUNT)
  private Amount benefitsTotalAmount;

  public static final String SERIALIZED_NAME_BONUSES_TOTAL_AMOUNT = "bonusesTotalAmount";
  @SerializedName(SERIALIZED_NAME_BONUSES_TOTAL_AMOUNT)
  private Amount bonusesTotalAmount;

  public static final String SERIALIZED_NAME_ADD_ONS_TOTAL_AMOUNT = "addOnsTotalAmount";
  @SerializedName(SERIALIZED_NAME_ADD_ONS_TOTAL_AMOUNT)
  private Amount addOnsTotalAmount;

  public static final String SERIALIZED_NAME_TAXES_TOTAL_AMOUNT = "taxesTotalAmount";
  @SerializedName(SERIALIZED_NAME_TAXES_TOTAL_AMOUNT)
  private Amount taxesTotalAmount;

  public static final String SERIALIZED_NAME_TRUE_UPS_TOTAL_AMOUNT = "trueUpsTotalAmount";
  @SerializedName(SERIALIZED_NAME_TRUE_UPS_TOTAL_AMOUNT)
  private Amount trueUpsTotalAmount;

  public static final String SERIALIZED_NAME_OYSTER_FEES_TOTAL_AMOUNT = "oysterFeesTotalAmount";
  @SerializedName(SERIALIZED_NAME_OYSTER_FEES_TOTAL_AMOUNT)
  private Amount oysterFeesTotalAmount;

  public static final String SERIALIZED_NAME_ENGAGEMENT = "engagement";
  @SerializedName(SERIALIZED_NAME_ENGAGEMENT)
  private PayrollRecordEngagement engagement;

  public PayrollRecord() {
  }

  public PayrollRecord engagementId(String engagementId) {
    
    
    
    
    this.engagementId = engagementId;
    return this;
  }

   /**
   * Get engagementId
   * @return engagementId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getEngagementId() {
    return engagementId;
  }


  public void setEngagementId(String engagementId) {
    
    
    
    this.engagementId = engagementId;
  }


  public PayrollRecord currencyCode(String currencyCode) {
    
    
    
    
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * Get currencyCode
   * @return currencyCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getCurrencyCode() {
    return currencyCode;
  }


  public void setCurrencyCode(String currencyCode) {
    
    
    
    this.currencyCode = currencyCode;
  }


  public PayrollRecord monthlyPaymentsTotalAmount(Amount monthlyPaymentsTotalAmount) {
    
    
    
    
    this.monthlyPaymentsTotalAmount = monthlyPaymentsTotalAmount;
    return this;
  }

   /**
   * Get monthlyPaymentsTotalAmount
   * @return monthlyPaymentsTotalAmount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Amount getMonthlyPaymentsTotalAmount() {
    return monthlyPaymentsTotalAmount;
  }


  public void setMonthlyPaymentsTotalAmount(Amount monthlyPaymentsTotalAmount) {
    
    
    
    this.monthlyPaymentsTotalAmount = monthlyPaymentsTotalAmount;
  }


  public PayrollRecord allowancesTotalAmount(Amount allowancesTotalAmount) {
    
    
    
    
    this.allowancesTotalAmount = allowancesTotalAmount;
    return this;
  }

   /**
   * Get allowancesTotalAmount
   * @return allowancesTotalAmount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Amount getAllowancesTotalAmount() {
    return allowancesTotalAmount;
  }


  public void setAllowancesTotalAmount(Amount allowancesTotalAmount) {
    
    
    
    this.allowancesTotalAmount = allowancesTotalAmount;
  }


  public PayrollRecord benefitsTotalAmount(Amount benefitsTotalAmount) {
    
    
    
    
    this.benefitsTotalAmount = benefitsTotalAmount;
    return this;
  }

   /**
   * Get benefitsTotalAmount
   * @return benefitsTotalAmount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Amount getBenefitsTotalAmount() {
    return benefitsTotalAmount;
  }


  public void setBenefitsTotalAmount(Amount benefitsTotalAmount) {
    
    
    
    this.benefitsTotalAmount = benefitsTotalAmount;
  }


  public PayrollRecord bonusesTotalAmount(Amount bonusesTotalAmount) {
    
    
    
    
    this.bonusesTotalAmount = bonusesTotalAmount;
    return this;
  }

   /**
   * Get bonusesTotalAmount
   * @return bonusesTotalAmount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Amount getBonusesTotalAmount() {
    return bonusesTotalAmount;
  }


  public void setBonusesTotalAmount(Amount bonusesTotalAmount) {
    
    
    
    this.bonusesTotalAmount = bonusesTotalAmount;
  }


  public PayrollRecord addOnsTotalAmount(Amount addOnsTotalAmount) {
    
    
    
    
    this.addOnsTotalAmount = addOnsTotalAmount;
    return this;
  }

   /**
   * Get addOnsTotalAmount
   * @return addOnsTotalAmount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Amount getAddOnsTotalAmount() {
    return addOnsTotalAmount;
  }


  public void setAddOnsTotalAmount(Amount addOnsTotalAmount) {
    
    
    
    this.addOnsTotalAmount = addOnsTotalAmount;
  }


  public PayrollRecord taxesTotalAmount(Amount taxesTotalAmount) {
    
    
    
    
    this.taxesTotalAmount = taxesTotalAmount;
    return this;
  }

   /**
   * Get taxesTotalAmount
   * @return taxesTotalAmount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Amount getTaxesTotalAmount() {
    return taxesTotalAmount;
  }


  public void setTaxesTotalAmount(Amount taxesTotalAmount) {
    
    
    
    this.taxesTotalAmount = taxesTotalAmount;
  }


  public PayrollRecord trueUpsTotalAmount(Amount trueUpsTotalAmount) {
    
    
    
    
    this.trueUpsTotalAmount = trueUpsTotalAmount;
    return this;
  }

   /**
   * Get trueUpsTotalAmount
   * @return trueUpsTotalAmount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Amount getTrueUpsTotalAmount() {
    return trueUpsTotalAmount;
  }


  public void setTrueUpsTotalAmount(Amount trueUpsTotalAmount) {
    
    
    
    this.trueUpsTotalAmount = trueUpsTotalAmount;
  }


  public PayrollRecord oysterFeesTotalAmount(Amount oysterFeesTotalAmount) {
    
    
    
    
    this.oysterFeesTotalAmount = oysterFeesTotalAmount;
    return this;
  }

   /**
   * Get oysterFeesTotalAmount
   * @return oysterFeesTotalAmount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Amount getOysterFeesTotalAmount() {
    return oysterFeesTotalAmount;
  }


  public void setOysterFeesTotalAmount(Amount oysterFeesTotalAmount) {
    
    
    
    this.oysterFeesTotalAmount = oysterFeesTotalAmount;
  }


  public PayrollRecord engagement(PayrollRecordEngagement engagement) {
    
    
    
    
    this.engagement = engagement;
    return this;
  }

   /**
   * Get engagement
   * @return engagement
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public PayrollRecordEngagement getEngagement() {
    return engagement;
  }


  public void setEngagement(PayrollRecordEngagement engagement) {
    
    
    
    this.engagement = engagement;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PayrollRecord instance itself
   */
  public PayrollRecord putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PayrollRecord payrollRecord = (PayrollRecord) o;
    return Objects.equals(this.engagementId, payrollRecord.engagementId) &&
        Objects.equals(this.currencyCode, payrollRecord.currencyCode) &&
        Objects.equals(this.monthlyPaymentsTotalAmount, payrollRecord.monthlyPaymentsTotalAmount) &&
        Objects.equals(this.allowancesTotalAmount, payrollRecord.allowancesTotalAmount) &&
        Objects.equals(this.benefitsTotalAmount, payrollRecord.benefitsTotalAmount) &&
        Objects.equals(this.bonusesTotalAmount, payrollRecord.bonusesTotalAmount) &&
        Objects.equals(this.addOnsTotalAmount, payrollRecord.addOnsTotalAmount) &&
        Objects.equals(this.taxesTotalAmount, payrollRecord.taxesTotalAmount) &&
        Objects.equals(this.trueUpsTotalAmount, payrollRecord.trueUpsTotalAmount) &&
        Objects.equals(this.oysterFeesTotalAmount, payrollRecord.oysterFeesTotalAmount) &&
        Objects.equals(this.engagement, payrollRecord.engagement)&&
        Objects.equals(this.additionalProperties, payrollRecord.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(engagementId, currencyCode, monthlyPaymentsTotalAmount, allowancesTotalAmount, benefitsTotalAmount, bonusesTotalAmount, addOnsTotalAmount, taxesTotalAmount, trueUpsTotalAmount, oysterFeesTotalAmount, engagement, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayrollRecord {\n");
    sb.append("    engagementId: ").append(toIndentedString(engagementId)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    monthlyPaymentsTotalAmount: ").append(toIndentedString(monthlyPaymentsTotalAmount)).append("\n");
    sb.append("    allowancesTotalAmount: ").append(toIndentedString(allowancesTotalAmount)).append("\n");
    sb.append("    benefitsTotalAmount: ").append(toIndentedString(benefitsTotalAmount)).append("\n");
    sb.append("    bonusesTotalAmount: ").append(toIndentedString(bonusesTotalAmount)).append("\n");
    sb.append("    addOnsTotalAmount: ").append(toIndentedString(addOnsTotalAmount)).append("\n");
    sb.append("    taxesTotalAmount: ").append(toIndentedString(taxesTotalAmount)).append("\n");
    sb.append("    trueUpsTotalAmount: ").append(toIndentedString(trueUpsTotalAmount)).append("\n");
    sb.append("    oysterFeesTotalAmount: ").append(toIndentedString(oysterFeesTotalAmount)).append("\n");
    sb.append("    engagement: ").append(toIndentedString(engagement)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("engagementId");
    openapiFields.add("currencyCode");
    openapiFields.add("monthlyPaymentsTotalAmount");
    openapiFields.add("allowancesTotalAmount");
    openapiFields.add("benefitsTotalAmount");
    openapiFields.add("bonusesTotalAmount");
    openapiFields.add("addOnsTotalAmount");
    openapiFields.add("taxesTotalAmount");
    openapiFields.add("trueUpsTotalAmount");
    openapiFields.add("oysterFeesTotalAmount");
    openapiFields.add("engagement");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("engagementId");
    openapiRequiredFields.add("currencyCode");
    openapiRequiredFields.add("monthlyPaymentsTotalAmount");
    openapiRequiredFields.add("allowancesTotalAmount");
    openapiRequiredFields.add("benefitsTotalAmount");
    openapiRequiredFields.add("bonusesTotalAmount");
    openapiRequiredFields.add("addOnsTotalAmount");
    openapiRequiredFields.add("taxesTotalAmount");
    openapiRequiredFields.add("trueUpsTotalAmount");
    openapiRequiredFields.add("oysterFeesTotalAmount");
    openapiRequiredFields.add("engagement");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PayrollRecord
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PayrollRecord.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PayrollRecord is not found in the empty JSON string", PayrollRecord.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PayrollRecord.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("engagementId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engagementId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engagementId").toString()));
      }
      if (!jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      // validate the required field `monthlyPaymentsTotalAmount`
      Amount.validateJsonObject(jsonObj.getAsJsonObject("monthlyPaymentsTotalAmount"));
      // validate the required field `allowancesTotalAmount`
      Amount.validateJsonObject(jsonObj.getAsJsonObject("allowancesTotalAmount"));
      // validate the required field `benefitsTotalAmount`
      Amount.validateJsonObject(jsonObj.getAsJsonObject("benefitsTotalAmount"));
      // validate the required field `bonusesTotalAmount`
      Amount.validateJsonObject(jsonObj.getAsJsonObject("bonusesTotalAmount"));
      // validate the required field `addOnsTotalAmount`
      Amount.validateJsonObject(jsonObj.getAsJsonObject("addOnsTotalAmount"));
      // validate the required field `taxesTotalAmount`
      Amount.validateJsonObject(jsonObj.getAsJsonObject("taxesTotalAmount"));
      // validate the required field `trueUpsTotalAmount`
      Amount.validateJsonObject(jsonObj.getAsJsonObject("trueUpsTotalAmount"));
      // validate the required field `oysterFeesTotalAmount`
      Amount.validateJsonObject(jsonObj.getAsJsonObject("oysterFeesTotalAmount"));
      // validate the required field `engagement`
      PayrollRecordEngagement.validateJsonObject(jsonObj.getAsJsonObject("engagement"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PayrollRecord.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PayrollRecord' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PayrollRecord> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PayrollRecord.class));

       return (TypeAdapter<T>) new TypeAdapter<PayrollRecord>() {
           @Override
           public void write(JsonWriter out, PayrollRecord value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PayrollRecord read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PayrollRecord instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PayrollRecord given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PayrollRecord
  * @throws IOException if the JSON string is invalid with respect to PayrollRecord
  */
  public static PayrollRecord fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PayrollRecord.class);
  }

 /**
  * Convert an instance of PayrollRecord to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

