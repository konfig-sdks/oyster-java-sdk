/*
 * Endpoints
 * Oyster uses OAuth2 to enable customers to grant access to their data to third party applications. Customers also need to use this API to authenticate themselves when making API requests.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.TimeOffEngagementDetails;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * TimeOffEntitlementsInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TimeOffEntitlementsInner {
  public static final String SERIALIZED_NAME_ENGAGEMENT = "engagement";
  @SerializedName(SERIALIZED_NAME_ENGAGEMENT)
  private TimeOffEngagementDetails engagement;

  public static final String SERIALIZED_NAME_ANNUAL_ENTITLEMENT = "annualEntitlement";
  @SerializedName(SERIALIZED_NAME_ANNUAL_ENTITLEMENT)
  private Float annualEntitlement;

  public static final String SERIALIZED_NAME_ACCRUED = "accrued";
  @SerializedName(SERIALIZED_NAME_ACCRUED)
  private Float accrued;

  public static final String SERIALIZED_NAME_CARRIED = "carried";
  @SerializedName(SERIALIZED_NAME_CARRIED)
  private Float carried;

  public static final String SERIALIZED_NAME_ADJUSTED_ADHOC = "adjustedAdhoc";
  @SerializedName(SERIALIZED_NAME_ADJUSTED_ADHOC)
  private Float adjustedAdhoc;

  public static final String SERIALIZED_NAME_TAKEN = "taken";
  @SerializedName(SERIALIZED_NAME_TAKEN)
  private Float taken;

  public static final String SERIALIZED_NAME_AVAILABLE_BALANCE = "availableBalance";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_BALANCE)
  private Float availableBalance;

  public static final String SERIALIZED_NAME_UPCOMING = "upcoming";
  @SerializedName(SERIALIZED_NAME_UPCOMING)
  private Float upcoming;

  public static final String SERIALIZED_NAME_PROJECTED_BALANCE = "projectedBalance";
  @SerializedName(SERIALIZED_NAME_PROJECTED_BALANCE)
  private Float projectedBalance;

  /**
   * Gets or Sets units
   */
  @JsonAdapter(UnitsEnum.Adapter.class)
 public enum UnitsEnum {
    DAYS("DAYS");

    private String value;

    UnitsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UnitsEnum fromValue(String value) {
      for (UnitsEnum b : UnitsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UnitsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UnitsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UnitsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UnitsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_UNITS = "units";
  @SerializedName(SERIALIZED_NAME_UNITS)
  private UnitsEnum units;

  public TimeOffEntitlementsInner() {
  }

  public TimeOffEntitlementsInner engagement(TimeOffEngagementDetails engagement) {
    
    
    
    
    this.engagement = engagement;
    return this;
  }

   /**
   * Get engagement
   * @return engagement
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TimeOffEngagementDetails getEngagement() {
    return engagement;
  }


  public void setEngagement(TimeOffEngagementDetails engagement) {
    
    
    
    this.engagement = engagement;
  }


  public TimeOffEntitlementsInner annualEntitlement(Float annualEntitlement) {
    
    
    
    
    this.annualEntitlement = annualEntitlement;
    return this;
  }

   /**
   * Get annualEntitlement
   * @return annualEntitlement
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Float getAnnualEntitlement() {
    return annualEntitlement;
  }


  public void setAnnualEntitlement(Float annualEntitlement) {
    
    
    
    this.annualEntitlement = annualEntitlement;
  }


  public TimeOffEntitlementsInner accrued(Float accrued) {
    
    
    
    
    this.accrued = accrued;
    return this;
  }

   /**
   * Get accrued
   * @return accrued
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Float getAccrued() {
    return accrued;
  }


  public void setAccrued(Float accrued) {
    
    
    
    this.accrued = accrued;
  }


  public TimeOffEntitlementsInner carried(Float carried) {
    
    
    
    
    this.carried = carried;
    return this;
  }

   /**
   * Get carried
   * @return carried
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Float getCarried() {
    return carried;
  }


  public void setCarried(Float carried) {
    
    
    
    this.carried = carried;
  }


  public TimeOffEntitlementsInner adjustedAdhoc(Float adjustedAdhoc) {
    
    
    
    
    this.adjustedAdhoc = adjustedAdhoc;
    return this;
  }

   /**
   * Get adjustedAdhoc
   * @return adjustedAdhoc
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Float getAdjustedAdhoc() {
    return adjustedAdhoc;
  }


  public void setAdjustedAdhoc(Float adjustedAdhoc) {
    
    
    
    this.adjustedAdhoc = adjustedAdhoc;
  }


  public TimeOffEntitlementsInner taken(Float taken) {
    
    
    
    
    this.taken = taken;
    return this;
  }

   /**
   * Get taken
   * @return taken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Float getTaken() {
    return taken;
  }


  public void setTaken(Float taken) {
    
    
    
    this.taken = taken;
  }


  public TimeOffEntitlementsInner availableBalance(Float availableBalance) {
    
    
    
    
    this.availableBalance = availableBalance;
    return this;
  }

   /**
   * Get availableBalance
   * @return availableBalance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Float getAvailableBalance() {
    return availableBalance;
  }


  public void setAvailableBalance(Float availableBalance) {
    
    
    
    this.availableBalance = availableBalance;
  }


  public TimeOffEntitlementsInner upcoming(Float upcoming) {
    
    
    
    
    this.upcoming = upcoming;
    return this;
  }

   /**
   * Get upcoming
   * @return upcoming
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Float getUpcoming() {
    return upcoming;
  }


  public void setUpcoming(Float upcoming) {
    
    
    
    this.upcoming = upcoming;
  }


  public TimeOffEntitlementsInner projectedBalance(Float projectedBalance) {
    
    
    
    
    this.projectedBalance = projectedBalance;
    return this;
  }

   /**
   * Get projectedBalance
   * @return projectedBalance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Float getProjectedBalance() {
    return projectedBalance;
  }


  public void setProjectedBalance(Float projectedBalance) {
    
    
    
    this.projectedBalance = projectedBalance;
  }


  public TimeOffEntitlementsInner units(UnitsEnum units) {
    
    
    
    
    this.units = units;
    return this;
  }

   /**
   * Get units
   * @return units
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UnitsEnum getUnits() {
    return units;
  }


  public void setUnits(UnitsEnum units) {
    
    
    
    this.units = units;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TimeOffEntitlementsInner instance itself
   */
  public TimeOffEntitlementsInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeOffEntitlementsInner timeOffEntitlementsInner = (TimeOffEntitlementsInner) o;
    return Objects.equals(this.engagement, timeOffEntitlementsInner.engagement) &&
        Objects.equals(this.annualEntitlement, timeOffEntitlementsInner.annualEntitlement) &&
        Objects.equals(this.accrued, timeOffEntitlementsInner.accrued) &&
        Objects.equals(this.carried, timeOffEntitlementsInner.carried) &&
        Objects.equals(this.adjustedAdhoc, timeOffEntitlementsInner.adjustedAdhoc) &&
        Objects.equals(this.taken, timeOffEntitlementsInner.taken) &&
        Objects.equals(this.availableBalance, timeOffEntitlementsInner.availableBalance) &&
        Objects.equals(this.upcoming, timeOffEntitlementsInner.upcoming) &&
        Objects.equals(this.projectedBalance, timeOffEntitlementsInner.projectedBalance) &&
        Objects.equals(this.units, timeOffEntitlementsInner.units)&&
        Objects.equals(this.additionalProperties, timeOffEntitlementsInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(engagement, annualEntitlement, accrued, carried, adjustedAdhoc, taken, availableBalance, upcoming, projectedBalance, units, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeOffEntitlementsInner {\n");
    sb.append("    engagement: ").append(toIndentedString(engagement)).append("\n");
    sb.append("    annualEntitlement: ").append(toIndentedString(annualEntitlement)).append("\n");
    sb.append("    accrued: ").append(toIndentedString(accrued)).append("\n");
    sb.append("    carried: ").append(toIndentedString(carried)).append("\n");
    sb.append("    adjustedAdhoc: ").append(toIndentedString(adjustedAdhoc)).append("\n");
    sb.append("    taken: ").append(toIndentedString(taken)).append("\n");
    sb.append("    availableBalance: ").append(toIndentedString(availableBalance)).append("\n");
    sb.append("    upcoming: ").append(toIndentedString(upcoming)).append("\n");
    sb.append("    projectedBalance: ").append(toIndentedString(projectedBalance)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("engagement");
    openapiFields.add("annualEntitlement");
    openapiFields.add("accrued");
    openapiFields.add("carried");
    openapiFields.add("adjustedAdhoc");
    openapiFields.add("taken");
    openapiFields.add("availableBalance");
    openapiFields.add("upcoming");
    openapiFields.add("projectedBalance");
    openapiFields.add("units");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TimeOffEntitlementsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TimeOffEntitlementsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimeOffEntitlementsInner is not found in the empty JSON string", TimeOffEntitlementsInner.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `engagement`
      if (jsonObj.get("engagement") != null && !jsonObj.get("engagement").isJsonNull()) {
        TimeOffEngagementDetails.validateJsonObject(jsonObj.getAsJsonObject("engagement"));
      }
      if ((jsonObj.get("units") != null && !jsonObj.get("units").isJsonNull()) && !jsonObj.get("units").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `units` to be a primitive type in the JSON string but got `%s`", jsonObj.get("units").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimeOffEntitlementsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimeOffEntitlementsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimeOffEntitlementsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimeOffEntitlementsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<TimeOffEntitlementsInner>() {
           @Override
           public void write(JsonWriter out, TimeOffEntitlementsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TimeOffEntitlementsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TimeOffEntitlementsInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TimeOffEntitlementsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TimeOffEntitlementsInner
  * @throws IOException if the JSON string is invalid with respect to TimeOffEntitlementsInner
  */
  public static TimeOffEntitlementsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimeOffEntitlementsInner.class);
  }

 /**
  * Convert an instance of TimeOffEntitlementsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

