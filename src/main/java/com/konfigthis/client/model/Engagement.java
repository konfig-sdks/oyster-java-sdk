/*
 * Endpoints
 * Oyster uses OAuth2 to enable customers to grant access to their data to third party applications. Customers also need to use this API to authenticate themselves when making API requests.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EngagementBenefitEnrollmentsInner;
import com.konfigthis.client.model.EngagementDepartment;
import com.konfigthis.client.model.EngagementPersonalDetails;
import com.konfigthis.client.model.EngagementTerminationsInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Engagement
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Engagement {
  public static final String SERIALIZED_NAME_ENGAGEMENT_ID = "engagementId";
  @SerializedName(SERIALIZED_NAME_ENGAGEMENT_ID)
  private String engagementId;

  public static final String SERIALIZED_NAME_MODIFIED_AT = "modifiedAt";
  @SerializedName(SERIALIZED_NAME_MODIFIED_AT)
  private OffsetDateTime modifiedAt;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private LocalDate startDate;

  /**
   * Gets or Sets engagementType
   */
  @JsonAdapter(EngagementTypeEnum.Adapter.class)
 public enum EngagementTypeEnum {
    EMPLOYMENT("EMPLOYMENT"),
    
    CONTRACT("CONTRACT");

    private String value;

    EngagementTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EngagementTypeEnum fromValue(String value) {
      for (EngagementTypeEnum b : EngagementTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EngagementTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EngagementTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EngagementTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EngagementTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ENGAGEMENT_TYPE = "engagementType";
  @SerializedName(SERIALIZED_NAME_ENGAGEMENT_TYPE)
  private EngagementTypeEnum engagementType;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private String role;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_PERSONAL_DETAILS = "personalDetails";
  @SerializedName(SERIALIZED_NAME_PERSONAL_DETAILS)
  private EngagementPersonalDetails personalDetails;

  public static final String SERIALIZED_NAME_EMPLOYMENT = "employment";
  @SerializedName(SERIALIZED_NAME_EMPLOYMENT)
  private Object employment;

  public static final String SERIALIZED_NAME_CONTRACT = "contract";
  @SerializedName(SERIALIZED_NAME_CONTRACT)
  private Object contract;

  public static final String SERIALIZED_NAME_BENEFIT_ENROLLMENTS = "benefitEnrollments";
  @SerializedName(SERIALIZED_NAME_BENEFIT_ENROLLMENTS)
  private List<EngagementBenefitEnrollmentsInner> benefitEnrollments = null;

  public static final String SERIALIZED_NAME_TERMINATIONS = "terminations";
  @SerializedName(SERIALIZED_NAME_TERMINATIONS)
  private List<EngagementTerminationsInner> terminations = null;

  public static final String SERIALIZED_NAME_DEPARTMENT = "department";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT)
  private EngagementDepartment department;

  public Engagement() {
  }

  public Engagement engagementId(String engagementId) {
    
    
    
    
    this.engagementId = engagementId;
    return this;
  }

   /**
   * Get engagementId
   * @return engagementId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getEngagementId() {
    return engagementId;
  }


  public void setEngagementId(String engagementId) {
    
    
    
    this.engagementId = engagementId;
  }


  public Engagement modifiedAt(OffsetDateTime modifiedAt) {
    
    
    
    
    this.modifiedAt = modifiedAt;
    return this;
  }

   /**
   * Get modifiedAt
   * @return modifiedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getModifiedAt() {
    return modifiedAt;
  }


  public void setModifiedAt(OffsetDateTime modifiedAt) {
    
    
    
    this.modifiedAt = modifiedAt;
  }


  public Engagement startDate(LocalDate startDate) {
    
    
    
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Get startDate
   * @return startDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public LocalDate getStartDate() {
    return startDate;
  }


  public void setStartDate(LocalDate startDate) {
    
    
    
    this.startDate = startDate;
  }


  public Engagement engagementType(EngagementTypeEnum engagementType) {
    
    
    
    
    this.engagementType = engagementType;
    return this;
  }

   /**
   * Get engagementType
   * @return engagementType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EngagementTypeEnum getEngagementType() {
    return engagementType;
  }


  public void setEngagementType(EngagementTypeEnum engagementType) {
    
    
    
    this.engagementType = engagementType;
  }


  public Engagement state(String state) {
    
    
    
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getState() {
    return state;
  }


  public void setState(String state) {
    
    
    
    this.state = state;
  }


  public Engagement role(String role) {
    
    
    
    
    this.role = role;
    return this;
  }

   /**
   * Get role
   * @return role
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getRole() {
    return role;
  }


  public void setRole(String role) {
    
    
    
    this.role = role;
  }


  public Engagement countryCode(String countryCode) {
    
    
    
    
    this.countryCode = countryCode;
    return this;
  }

   /**
   * Get countryCode
   * @return countryCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getCountryCode() {
    return countryCode;
  }


  public void setCountryCode(String countryCode) {
    
    
    
    this.countryCode = countryCode;
  }


  public Engagement personalDetails(EngagementPersonalDetails personalDetails) {
    
    
    
    
    this.personalDetails = personalDetails;
    return this;
  }

   /**
   * Get personalDetails
   * @return personalDetails
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EngagementPersonalDetails getPersonalDetails() {
    return personalDetails;
  }


  public void setPersonalDetails(EngagementPersonalDetails personalDetails) {
    
    
    
    this.personalDetails = personalDetails;
  }


  public Engagement employment(Object employment) {
    
    
    
    
    this.employment = employment;
    return this;
  }

   /**
   * Get employment
   * @return employment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getEmployment() {
    return employment;
  }


  public void setEmployment(Object employment) {
    
    
    
    this.employment = employment;
  }


  public Engagement contract(Object contract) {
    
    
    
    
    this.contract = contract;
    return this;
  }

   /**
   * Get contract
   * @return contract
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getContract() {
    return contract;
  }


  public void setContract(Object contract) {
    
    
    
    this.contract = contract;
  }


  public Engagement benefitEnrollments(List<EngagementBenefitEnrollmentsInner> benefitEnrollments) {
    
    
    
    
    this.benefitEnrollments = benefitEnrollments;
    return this;
  }

  public Engagement addBenefitEnrollmentsItem(EngagementBenefitEnrollmentsInner benefitEnrollmentsItem) {
    if (this.benefitEnrollments == null) {
      this.benefitEnrollments = new ArrayList<>();
    }
    this.benefitEnrollments.add(benefitEnrollmentsItem);
    return this;
  }

   /**
   * Get benefitEnrollments
   * @return benefitEnrollments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EngagementBenefitEnrollmentsInner> getBenefitEnrollments() {
    return benefitEnrollments;
  }


  public void setBenefitEnrollments(List<EngagementBenefitEnrollmentsInner> benefitEnrollments) {
    
    
    
    this.benefitEnrollments = benefitEnrollments;
  }


  public Engagement terminations(List<EngagementTerminationsInner> terminations) {
    
    
    
    
    this.terminations = terminations;
    return this;
  }

  public Engagement addTerminationsItem(EngagementTerminationsInner terminationsItem) {
    if (this.terminations == null) {
      this.terminations = new ArrayList<>();
    }
    this.terminations.add(terminationsItem);
    return this;
  }

   /**
   * Get terminations
   * @return terminations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<EngagementTerminationsInner> getTerminations() {
    return terminations;
  }


  public void setTerminations(List<EngagementTerminationsInner> terminations) {
    
    
    
    this.terminations = terminations;
  }


  public Engagement department(EngagementDepartment department) {
    
    
    
    
    this.department = department;
    return this;
  }

   /**
   * Get department
   * @return department
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EngagementDepartment getDepartment() {
    return department;
  }


  public void setDepartment(EngagementDepartment department) {
    
    
    
    this.department = department;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Engagement instance itself
   */
  public Engagement putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Engagement engagement = (Engagement) o;
    return Objects.equals(this.engagementId, engagement.engagementId) &&
        Objects.equals(this.modifiedAt, engagement.modifiedAt) &&
        Objects.equals(this.startDate, engagement.startDate) &&
        Objects.equals(this.engagementType, engagement.engagementType) &&
        Objects.equals(this.state, engagement.state) &&
        Objects.equals(this.role, engagement.role) &&
        Objects.equals(this.countryCode, engagement.countryCode) &&
        Objects.equals(this.personalDetails, engagement.personalDetails) &&
        Objects.equals(this.employment, engagement.employment) &&
        Objects.equals(this.contract, engagement.contract) &&
        Objects.equals(this.benefitEnrollments, engagement.benefitEnrollments) &&
        Objects.equals(this.terminations, engagement.terminations) &&
        Objects.equals(this.department, engagement.department)&&
        Objects.equals(this.additionalProperties, engagement.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(engagementId, modifiedAt, startDate, engagementType, state, role, countryCode, personalDetails, employment, contract, benefitEnrollments, terminations, department, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Engagement {\n");
    sb.append("    engagementId: ").append(toIndentedString(engagementId)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    engagementType: ").append(toIndentedString(engagementType)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    personalDetails: ").append(toIndentedString(personalDetails)).append("\n");
    sb.append("    employment: ").append(toIndentedString(employment)).append("\n");
    sb.append("    contract: ").append(toIndentedString(contract)).append("\n");
    sb.append("    benefitEnrollments: ").append(toIndentedString(benefitEnrollments)).append("\n");
    sb.append("    terminations: ").append(toIndentedString(terminations)).append("\n");
    sb.append("    department: ").append(toIndentedString(department)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("engagementId");
    openapiFields.add("modifiedAt");
    openapiFields.add("startDate");
    openapiFields.add("engagementType");
    openapiFields.add("state");
    openapiFields.add("role");
    openapiFields.add("countryCode");
    openapiFields.add("personalDetails");
    openapiFields.add("employment");
    openapiFields.add("contract");
    openapiFields.add("benefitEnrollments");
    openapiFields.add("terminations");
    openapiFields.add("department");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("engagementId");
    openapiRequiredFields.add("startDate");
    openapiRequiredFields.add("engagementType");
    openapiRequiredFields.add("role");
    openapiRequiredFields.add("countryCode");
    openapiRequiredFields.add("personalDetails");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Engagement
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Engagement.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Engagement is not found in the empty JSON string", Engagement.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Engagement.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("engagementId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engagementId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engagementId").toString()));
      }
      if (!jsonObj.get("engagementType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `engagementType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("engagementType").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if (!jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
      if (!jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      // validate the required field `personalDetails`
      EngagementPersonalDetails.validateJsonObject(jsonObj.getAsJsonObject("personalDetails"));
      if (jsonObj.get("benefitEnrollments") != null && !jsonObj.get("benefitEnrollments").isJsonNull()) {
        JsonArray jsonArraybenefitEnrollments = jsonObj.getAsJsonArray("benefitEnrollments");
        if (jsonArraybenefitEnrollments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("benefitEnrollments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `benefitEnrollments` to be an array in the JSON string but got `%s`", jsonObj.get("benefitEnrollments").toString()));
          }

          // validate the optional field `benefitEnrollments` (array)
          for (int i = 0; i < jsonArraybenefitEnrollments.size(); i++) {
            EngagementBenefitEnrollmentsInner.validateJsonObject(jsonArraybenefitEnrollments.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("terminations") != null && !jsonObj.get("terminations").isJsonNull()) {
        JsonArray jsonArrayterminations = jsonObj.getAsJsonArray("terminations");
        if (jsonArrayterminations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("terminations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `terminations` to be an array in the JSON string but got `%s`", jsonObj.get("terminations").toString()));
          }

          // validate the optional field `terminations` (array)
          for (int i = 0; i < jsonArrayterminations.size(); i++) {
            EngagementTerminationsInner.validateJsonObject(jsonArrayterminations.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `department`
      if (jsonObj.get("department") != null && !jsonObj.get("department").isJsonNull()) {
        EngagementDepartment.validateJsonObject(jsonObj.getAsJsonObject("department"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Engagement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Engagement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Engagement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Engagement.class));

       return (TypeAdapter<T>) new TypeAdapter<Engagement>() {
           @Override
           public void write(JsonWriter out, Engagement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Engagement read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Engagement instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Engagement given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Engagement
  * @throws IOException if the JSON string is invalid with respect to Engagement
  */
  public static Engagement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Engagement.class);
  }

 /**
  * Convert an instance of Engagement to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

