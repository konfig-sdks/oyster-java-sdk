/*
 * Endpoints
 * Oyster uses OAuth2 to enable customers to grant access to their data to third party applications. Customers also need to use this API to authenticate themselves when making API requests.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Amount;
import com.konfigthis.client.model.ExpenseEngagement;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Expense
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Expense {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EXPENSE_ID = "expenseId";
  @SerializedName(SERIALIZED_NAME_EXPENSE_ID)
  private String expenseId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Amount amount;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_INCURRED_ON = "incurredOn";
  @SerializedName(SERIALIZED_NAME_INCURRED_ON)
  private LocalDate incurredOn;

  public static final String SERIALIZED_NAME_SUBMITTED_AT = "submittedAt";
  @SerializedName(SERIALIZED_NAME_SUBMITTED_AT)
  private OffsetDateTime submittedAt;

  public static final String SERIALIZED_NAME_REVIEW_STATE = "reviewState";
  @SerializedName(SERIALIZED_NAME_REVIEW_STATE)
  private String reviewState;

  public static final String SERIALIZED_NAME_REVIEWED_AT = "reviewedAt";
  @SerializedName(SERIALIZED_NAME_REVIEWED_AT)
  private OffsetDateTime reviewedAt;

  public static final String SERIALIZED_NAME_RECEIPT_AMOUNT = "receiptAmount";
  @SerializedName(SERIALIZED_NAME_RECEIPT_AMOUNT)
  private Amount receiptAmount;

  public static final String SERIALIZED_NAME_RECEIPT_URL = "receiptUrl";
  @SerializedName(SERIALIZED_NAME_RECEIPT_URL)
  private URI receiptUrl;

  public static final String SERIALIZED_NAME_ENGAGEMENT = "engagement";
  @SerializedName(SERIALIZED_NAME_ENGAGEMENT)
  private ExpenseEngagement engagement;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public Expense() {
  }

  public Expense description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public Expense expenseId(String expenseId) {
    
    
    
    
    this.expenseId = expenseId;
    return this;
  }

   /**
   * Get expenseId
   * @return expenseId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getExpenseId() {
    return expenseId;
  }


  public void setExpenseId(String expenseId) {
    
    
    
    this.expenseId = expenseId;
  }


  public Expense name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public Expense amount(Amount amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Amount getAmount() {
    return amount;
  }


  public void setAmount(Amount amount) {
    
    
    
    this.amount = amount;
  }


  public Expense category(String category) {
    
    
    
    
    this.category = category;
    return this;
  }

   /**
   * Get category
   * @return category
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getCategory() {
    return category;
  }


  public void setCategory(String category) {
    
    
    
    this.category = category;
  }


  public Expense incurredOn(LocalDate incurredOn) {
    
    
    
    
    this.incurredOn = incurredOn;
    return this;
  }

   /**
   * Get incurredOn
   * @return incurredOn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LocalDate getIncurredOn() {
    return incurredOn;
  }


  public void setIncurredOn(LocalDate incurredOn) {
    
    
    
    this.incurredOn = incurredOn;
  }


  public Expense submittedAt(OffsetDateTime submittedAt) {
    
    
    
    
    this.submittedAt = submittedAt;
    return this;
  }

   /**
   * Get submittedAt
   * @return submittedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getSubmittedAt() {
    return submittedAt;
  }


  public void setSubmittedAt(OffsetDateTime submittedAt) {
    
    
    
    this.submittedAt = submittedAt;
  }


  public Expense reviewState(String reviewState) {
    
    
    
    
    this.reviewState = reviewState;
    return this;
  }

   /**
   * Get reviewState
   * @return reviewState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getReviewState() {
    return reviewState;
  }


  public void setReviewState(String reviewState) {
    
    
    
    this.reviewState = reviewState;
  }


  public Expense reviewedAt(OffsetDateTime reviewedAt) {
    
    
    
    
    this.reviewedAt = reviewedAt;
    return this;
  }

   /**
   * Get reviewedAt
   * @return reviewedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getReviewedAt() {
    return reviewedAt;
  }


  public void setReviewedAt(OffsetDateTime reviewedAt) {
    
    
    
    this.reviewedAt = reviewedAt;
  }


  public Expense receiptAmount(Amount receiptAmount) {
    
    
    
    
    this.receiptAmount = receiptAmount;
    return this;
  }

   /**
   * Get receiptAmount
   * @return receiptAmount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Amount getReceiptAmount() {
    return receiptAmount;
  }


  public void setReceiptAmount(Amount receiptAmount) {
    
    
    
    this.receiptAmount = receiptAmount;
  }


  public Expense receiptUrl(URI receiptUrl) {
    
    
    
    
    this.receiptUrl = receiptUrl;
    return this;
  }

   /**
   * Get receiptUrl
   * @return receiptUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public URI getReceiptUrl() {
    return receiptUrl;
  }


  public void setReceiptUrl(URI receiptUrl) {
    
    
    
    this.receiptUrl = receiptUrl;
  }


  public Expense engagement(ExpenseEngagement engagement) {
    
    
    
    
    this.engagement = engagement;
    return this;
  }

   /**
   * Get engagement
   * @return engagement
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ExpenseEngagement getEngagement() {
    return engagement;
  }


  public void setEngagement(ExpenseEngagement engagement) {
    
    
    
    this.engagement = engagement;
  }


  public Expense source(String source) {
    
    
    
    
    this.source = source;
    return this;
  }

   /**
   * Get source
   * @return source
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSource() {
    return source;
  }


  public void setSource(String source) {
    
    
    
    this.source = source;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Expense instance itself
   */
  public Expense putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Expense expense = (Expense) o;
    return Objects.equals(this.description, expense.description) &&
        Objects.equals(this.expenseId, expense.expenseId) &&
        Objects.equals(this.name, expense.name) &&
        Objects.equals(this.amount, expense.amount) &&
        Objects.equals(this.category, expense.category) &&
        Objects.equals(this.incurredOn, expense.incurredOn) &&
        Objects.equals(this.submittedAt, expense.submittedAt) &&
        Objects.equals(this.reviewState, expense.reviewState) &&
        Objects.equals(this.reviewedAt, expense.reviewedAt) &&
        Objects.equals(this.receiptAmount, expense.receiptAmount) &&
        Objects.equals(this.receiptUrl, expense.receiptUrl) &&
        Objects.equals(this.engagement, expense.engagement) &&
        Objects.equals(this.source, expense.source)&&
        Objects.equals(this.additionalProperties, expense.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, expenseId, name, amount, category, incurredOn, submittedAt, reviewState, reviewedAt, receiptAmount, receiptUrl, engagement, source, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Expense {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    expenseId: ").append(toIndentedString(expenseId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    incurredOn: ").append(toIndentedString(incurredOn)).append("\n");
    sb.append("    submittedAt: ").append(toIndentedString(submittedAt)).append("\n");
    sb.append("    reviewState: ").append(toIndentedString(reviewState)).append("\n");
    sb.append("    reviewedAt: ").append(toIndentedString(reviewedAt)).append("\n");
    sb.append("    receiptAmount: ").append(toIndentedString(receiptAmount)).append("\n");
    sb.append("    receiptUrl: ").append(toIndentedString(receiptUrl)).append("\n");
    sb.append("    engagement: ").append(toIndentedString(engagement)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("expenseId");
    openapiFields.add("name");
    openapiFields.add("amount");
    openapiFields.add("category");
    openapiFields.add("incurredOn");
    openapiFields.add("submittedAt");
    openapiFields.add("reviewState");
    openapiFields.add("reviewedAt");
    openapiFields.add("receiptAmount");
    openapiFields.add("receiptUrl");
    openapiFields.add("engagement");
    openapiFields.add("source");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("expenseId");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("category");
    openapiRequiredFields.add("receiptAmount");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Expense
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Expense.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Expense is not found in the empty JSON string", Expense.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Expense.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("description").isJsonNull() && (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("expenseId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expenseId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expenseId").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if ((jsonObj.get("reviewState") != null && !jsonObj.get("reviewState").isJsonNull()) && !jsonObj.get("reviewState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reviewState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reviewState").toString()));
      }
      if (!jsonObj.get("receiptUrl").isJsonNull() && (jsonObj.get("receiptUrl") != null && !jsonObj.get("receiptUrl").isJsonNull()) && !jsonObj.get("receiptUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiptUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiptUrl").toString()));
      }
      // validate the optional field `engagement`
      if (jsonObj.get("engagement") != null && !jsonObj.get("engagement").isJsonNull()) {
        ExpenseEngagement.validateJsonObject(jsonObj.getAsJsonObject("engagement"));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Expense.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Expense' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Expense> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Expense.class));

       return (TypeAdapter<T>) new TypeAdapter<Expense>() {
           @Override
           public void write(JsonWriter out, Expense value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Expense read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Expense instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Expense given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Expense
  * @throws IOException if the JSON string is invalid with respect to Expense
  */
  public static Expense fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Expense.class);
  }

 /**
  * Convert an instance of Expense to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

