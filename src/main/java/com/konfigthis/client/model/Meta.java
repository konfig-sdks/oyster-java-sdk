/*
 * Endpoints
 * Oyster uses OAuth2 to enable customers to grant access to their data to third party applications. Customers also need to use this API to authenticate themselves when making API requests.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Meta
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Meta {
  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private Integer items;

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count;

  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private Integer page;

  public static final String SERIALIZED_NAME_PAGES = "pages";
  @SerializedName(SERIALIZED_NAME_PAGES)
  private Integer pages;

  public static final String SERIALIZED_NAME_FIRST_URL = "firstUrl";
  @SerializedName(SERIALIZED_NAME_FIRST_URL)
  private String firstUrl;

  public static final String SERIALIZED_NAME_LAST_URL = "lastUrl";
  @SerializedName(SERIALIZED_NAME_LAST_URL)
  private String lastUrl;

  public static final String SERIALIZED_NAME_PAGE_URL = "pageUrl";
  @SerializedName(SERIALIZED_NAME_PAGE_URL)
  private String pageUrl;

  public static final String SERIALIZED_NAME_NEXT_URL = "nextUrl";
  @SerializedName(SERIALIZED_NAME_NEXT_URL)
  private String nextUrl;

  public static final String SERIALIZED_NAME_PREV_URL = "prevUrl";
  @SerializedName(SERIALIZED_NAME_PREV_URL)
  private String prevUrl;

  public Meta() {
  }

  public Meta items(Integer items) {
    
    
    
    
    this.items = items;
    return this;
  }

   /**
   * Get items
   * @return items
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getItems() {
    return items;
  }


  public void setItems(Integer items) {
    
    
    
    this.items = items;
  }


  public Meta count(Integer count) {
    
    
    
    
    this.count = count;
    return this;
  }

   /**
   * Get count
   * @return count
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCount() {
    return count;
  }


  public void setCount(Integer count) {
    
    
    
    this.count = count;
  }


  public Meta page(Integer page) {
    
    
    
    
    this.page = page;
    return this;
  }

   /**
   * Get page
   * @return page
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPage() {
    return page;
  }


  public void setPage(Integer page) {
    
    
    
    this.page = page;
  }


  public Meta pages(Integer pages) {
    
    
    
    
    this.pages = pages;
    return this;
  }

   /**
   * Get pages
   * @return pages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPages() {
    return pages;
  }


  public void setPages(Integer pages) {
    
    
    
    this.pages = pages;
  }


  public Meta firstUrl(String firstUrl) {
    
    
    
    
    this.firstUrl = firstUrl;
    return this;
  }

   /**
   * Get firstUrl
   * @return firstUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFirstUrl() {
    return firstUrl;
  }


  public void setFirstUrl(String firstUrl) {
    
    
    
    this.firstUrl = firstUrl;
  }


  public Meta lastUrl(String lastUrl) {
    
    
    
    
    this.lastUrl = lastUrl;
    return this;
  }

   /**
   * Get lastUrl
   * @return lastUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLastUrl() {
    return lastUrl;
  }


  public void setLastUrl(String lastUrl) {
    
    
    
    this.lastUrl = lastUrl;
  }


  public Meta pageUrl(String pageUrl) {
    
    
    
    
    this.pageUrl = pageUrl;
    return this;
  }

   /**
   * Get pageUrl
   * @return pageUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPageUrl() {
    return pageUrl;
  }


  public void setPageUrl(String pageUrl) {
    
    
    
    this.pageUrl = pageUrl;
  }


  public Meta nextUrl(String nextUrl) {
    
    
    
    
    this.nextUrl = nextUrl;
    return this;
  }

   /**
   * Get nextUrl
   * @return nextUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNextUrl() {
    return nextUrl;
  }


  public void setNextUrl(String nextUrl) {
    
    
    
    this.nextUrl = nextUrl;
  }


  public Meta prevUrl(String prevUrl) {
    
    
    
    
    this.prevUrl = prevUrl;
    return this;
  }

   /**
   * Get prevUrl
   * @return prevUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPrevUrl() {
    return prevUrl;
  }


  public void setPrevUrl(String prevUrl) {
    
    
    
    this.prevUrl = prevUrl;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Meta instance itself
   */
  public Meta putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Meta meta = (Meta) o;
    return Objects.equals(this.items, meta.items) &&
        Objects.equals(this.count, meta.count) &&
        Objects.equals(this.page, meta.page) &&
        Objects.equals(this.pages, meta.pages) &&
        Objects.equals(this.firstUrl, meta.firstUrl) &&
        Objects.equals(this.lastUrl, meta.lastUrl) &&
        Objects.equals(this.pageUrl, meta.pageUrl) &&
        Objects.equals(this.nextUrl, meta.nextUrl) &&
        Objects.equals(this.prevUrl, meta.prevUrl)&&
        Objects.equals(this.additionalProperties, meta.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(items, count, page, pages, firstUrl, lastUrl, pageUrl, nextUrl, prevUrl, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Meta {\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    pages: ").append(toIndentedString(pages)).append("\n");
    sb.append("    firstUrl: ").append(toIndentedString(firstUrl)).append("\n");
    sb.append("    lastUrl: ").append(toIndentedString(lastUrl)).append("\n");
    sb.append("    pageUrl: ").append(toIndentedString(pageUrl)).append("\n");
    sb.append("    nextUrl: ").append(toIndentedString(nextUrl)).append("\n");
    sb.append("    prevUrl: ").append(toIndentedString(prevUrl)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("items");
    openapiFields.add("count");
    openapiFields.add("page");
    openapiFields.add("pages");
    openapiFields.add("firstUrl");
    openapiFields.add("lastUrl");
    openapiFields.add("pageUrl");
    openapiFields.add("nextUrl");
    openapiFields.add("prevUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Meta
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Meta.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Meta is not found in the empty JSON string", Meta.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("firstUrl") != null && !jsonObj.get("firstUrl").isJsonNull()) && !jsonObj.get("firstUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstUrl").toString()));
      }
      if ((jsonObj.get("lastUrl") != null && !jsonObj.get("lastUrl").isJsonNull()) && !jsonObj.get("lastUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastUrl").toString()));
      }
      if ((jsonObj.get("pageUrl") != null && !jsonObj.get("pageUrl").isJsonNull()) && !jsonObj.get("pageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pageUrl").toString()));
      }
      if ((jsonObj.get("nextUrl") != null && !jsonObj.get("nextUrl").isJsonNull()) && !jsonObj.get("nextUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextUrl").toString()));
      }
      if ((jsonObj.get("prevUrl") != null && !jsonObj.get("prevUrl").isJsonNull()) && !jsonObj.get("prevUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prevUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prevUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Meta.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Meta' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Meta> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Meta.class));

       return (TypeAdapter<T>) new TypeAdapter<Meta>() {
           @Override
           public void write(JsonWriter out, Meta value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Meta read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Meta instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Meta given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Meta
  * @throws IOException if the JSON string is invalid with respect to Meta
  */
  public static Meta fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Meta.class);
  }

 /**
  * Convert an instance of Meta to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

